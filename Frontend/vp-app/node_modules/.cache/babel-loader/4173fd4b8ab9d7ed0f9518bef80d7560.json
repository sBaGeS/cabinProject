{"ast":null,"code":"import DateFnsUtils from \"@date-io/date-fns\"; // return the token from the session storage\n\nexport const getUser = () => {\n  return sessionStorage.getItem('user_username') || null;\n};\nexport const getUserId = () => {\n  return sessionStorage.getItem('user_id') || null;\n};\nexport const getToken = () => {\n  checkTokenExp();\n  return sessionStorage.getItem('token') || null;\n}; // remove the token and user from the session storage\n\nexport const removeUserSession = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('user_id');\n  sessionStorage.removeItem('user_username');\n  sessionStorage.removeItem('user_role');\n  sessionStorage.removeItem('token_exp');\n}; // set the token and user from the session storage\n\nexport const setUserSession = token => {\n  let user = parseJwt(token);\n  console.log(user);\n  sessionStorage.setItem('user_id', user.id);\n  sessionStorage.setItem('user_username', user.username);\n  sessionStorage.setItem('user_role', user.role);\n  sessionStorage.setItem('token', token);\n  sessionStorage.setItem('token_exp', new Date(user.exp * 1000));\n};\n\nfunction parseJwt(token) {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\n\n;\nexport const checkTokenExp = () => {\n  let tokenExpTime = new Date(sessionStorage.getItem('token_exp'));\n  let timeNow = new Date();\n\n  if (timeNow > tokenExpTime) {\n    removeUserSession();\n  }\n};","map":{"version":3,"sources":["C:/Users/Pauli/Desktop/groupC/Frontend/vp-app/src/Utils/Common.js"],"names":["DateFnsUtils","getUser","sessionStorage","getItem","getUserId","getToken","checkTokenExp","removeUserSession","removeItem","setUserSession","token","user","parseJwt","console","log","setItem","id","username","role","Date","exp","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","tokenExpTime","timeNow"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,SAAOC,cAAc,CAACC,OAAf,CAAuB,eAAvB,KAA2C,IAAlD;AACD,CAFM;AAGP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAOF,cAAc,CAACC,OAAf,CAAuB,SAAvB,KAAqC,IAA5C;AACD,CAFM;AAGP,OAAO,MAAME,QAAQ,GAAG,MAAM;AAC5BC,EAAAA,aAAa;AACb,SAAOJ,cAAc,CAACC,OAAf,CAAuB,OAAvB,KAAmC,IAA1C;AACD,CAHM,C,CAIP;;AACA,OAAO,MAAMI,iBAAiB,GAAG,MAAM;AACrCL,EAAAA,cAAc,CAACM,UAAf,CAA0B,OAA1B;AACAN,EAAAA,cAAc,CAACM,UAAf,CAA0B,SAA1B;AACAN,EAAAA,cAAc,CAACM,UAAf,CAA0B,eAA1B;AACAN,EAAAA,cAAc,CAACM,UAAf,CAA0B,WAA1B;AACAN,EAAAA,cAAc,CAACM,UAAf,CAA0B,WAA1B;AACD,CANM,C,CAQP;;AACA,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAAW;AACvC,MAAIC,IAAI,GAAGC,QAAQ,CAACF,KAAD,CAAnB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAT,EAAAA,cAAc,CAACa,OAAf,CAAuB,SAAvB,EAAkCJ,IAAI,CAACK,EAAvC;AACAd,EAAAA,cAAc,CAACa,OAAf,CAAuB,eAAvB,EAAwCJ,IAAI,CAACM,QAA7C;AACAf,EAAAA,cAAc,CAACa,OAAf,CAAuB,WAAvB,EAAoCJ,IAAI,CAACO,IAAzC;AACAhB,EAAAA,cAAc,CAACa,OAAf,CAAuB,OAAvB,EAAgCL,KAAhC;AACAR,EAAAA,cAAc,CAACa,OAAf,CAAuB,WAAvB,EAAqC,IAAII,IAAJ,CAASR,IAAI,CAACS,GAAL,GAAW,IAApB,CAArC;AACD,CARM;;AASP,SAASR,QAAT,CAAkBF,KAAlB,EAAyB;AACvB,MAAIW,SAAS,GAAGX,KAAK,CAACY,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAhB;AACA,MAAIC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAb;AACA,MAAIC,WAAW,GAAGC,kBAAkB,CAACC,IAAI,CAACJ,MAAD,CAAJ,CAAaD,KAAb,CAAmB,EAAnB,EAAuBM,GAAvB,CAA2B,UAAUC,CAAV,EAAa;AAC3E,WAAO,MAAM,CAAC,OAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAR,EAAsCC,KAAtC,CAA4C,CAAC,CAA7C,CAAb;AACD,GAFoC,EAElCC,IAFkC,CAE7B,EAF6B,CAAD,CAApC;AAIA,SAAOC,IAAI,CAACC,KAAL,CAAWV,WAAX,CAAP;AACD;;AAAA;AAED,OAAO,MAAMnB,aAAa,GAAG,MAAM;AACjC,MAAI8B,YAAY,GAAG,IAAIjB,IAAJ,CAASjB,cAAc,CAACC,OAAf,CAAuB,WAAvB,CAAT,CAAnB;AACA,MAAIkC,OAAO,GAAG,IAAIlB,IAAJ,EAAd;;AAEA,MAAIkB,OAAO,GAAGD,YAAd,EAA4B;AAC1B7B,IAAAA,iBAAiB;AAClB;AACF,CAPM","sourcesContent":["import DateFnsUtils from \"@date-io/date-fns\";\r\n\r\n// return the token from the session storage\r\nexport const getUser = () => {\r\n  return sessionStorage.getItem('user_username') || null;\r\n}\r\nexport const getUserId = () => {\r\n  return sessionStorage.getItem('user_id') || null;\r\n}\r\nexport const getToken = () => {\r\n  checkTokenExp()\r\n  return sessionStorage.getItem('token') || null;\r\n}\r\n// remove the token and user from the session storage\r\nexport const removeUserSession = () => {\r\n  sessionStorage.removeItem('token');\r\n  sessionStorage.removeItem('user_id');\r\n  sessionStorage.removeItem('user_username');\r\n  sessionStorage.removeItem('user_role');\r\n  sessionStorage.removeItem('token_exp');\r\n}\r\n\r\n// set the token and user from the session storage\r\nexport const setUserSession = (token) => {\r\n  let user = parseJwt(token);\r\n  console.log(user);\r\n  sessionStorage.setItem('user_id', user.id);\r\n  sessionStorage.setItem('user_username', user.username);\r\n  sessionStorage.setItem('user_role', user.role);\r\n  sessionStorage.setItem('token', token);\r\n  sessionStorage.setItem('token_exp', (new Date(user.exp * 1000)));\r\n}\r\nfunction parseJwt(token) {\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\r\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n  }).join(''));\r\n\r\n  return JSON.parse(jsonPayload);\r\n};\r\n\r\nexport const checkTokenExp = () => {\r\n  let tokenExpTime = new Date(sessionStorage.getItem('token_exp'));\r\n  let timeNow = new Date();\r\n  \r\n  if (timeNow > tokenExpTime) {\r\n    removeUserSession();\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}